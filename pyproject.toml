[project]
name = "rebelist-streamline"
version = "0.1.0"
description = "A free and open-source platform for collecting, visualizing, and analyzing engineering metrics, allowing teams to track performance, improve processes, and make data-driven decisions."
authors = [
    { name = "Fran", email = "rebelist.software@icloud.com" }
]
readme = "README.md"
requires-python = ">=3.13,<4.0"

[build-system]
requires = ["poetry-core>=2.1.3,<3.0.0"]
build-backend = "poetry.core.masonry.api"

### poetry ###

[tool.poetry.dependencies]
poetry-core = "^2.1.3"
jira = { url = "https://github.com/pycontribs/jira/releases/download/3.10.1/jira-3.10.1-py3-none-any.whl" }
dependency-injector = "^4.47.1" # wait for updates
python-dotenv = "^1.1.0"
workalendar = "^17.0.0"
python-dateutil = "^2.9.0.post0"
rich-click = "^1.8.8"
pymongo = "^4.12.1"
fastapi = "^0.115.12"
fastapi-cli = "^0.0.7"
loguru = "^0.7.3"
pydantic-settings = "^2.9.1"
pydantic = "^2.11.4"

[tool.poetry]
packages = [{ include = "streamline", from = "src" }]
package-mode = false

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-mock = "^3.14.0"
pyright = "^1.1.399"
ruff = "^0.11.4"
coverage = "^7.8.0"
pre-commit = "^4.2.0"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9"

### pyright ###

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["src", "tests"]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownLambdaType = false
exclude = [
    "**/__pycache__"
]

### ruff ###

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # Aesthetic rules (e.g., blank lines, comment formatting)
    "E", # Errors (e.g., syntax errors, indentation issues)
    "W", # Warnings (e.g., line length, trailing whitespace)
    "F", # Pyflakes (e.g., unused imports, undefined variables)
    "I", # Import rules (e.g., import order, unused imports)
    "B", # Bugbear (e.g., potential bugs, mutable default arguments)
    "C4", # McCabe complexity (e.g., function complexity)
    "N", # Naming conventions (e.g., PEP8 naming standards)
    "D", # Docstrings (e.g., missing docstrings, formatting issues)
    "RUF100", # Mistakes (e.g., common mistakes or poor patterns)
]
ignore = [
    "ANN", # Disable all type annotation-related checks
    "PYI", # Disable checks for .pyi stub files
    "PLR", # Disable Pylint rules related to typing
    "D107", # Disable documentation on __init__ methods
    "D100", # Disable missing docstring in public module
    "D104", # Disable missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

### pytest ###

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/site-packages/*",
    "*/dependency_injector/*",
    "**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "coverage"