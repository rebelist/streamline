[project]
name = "rebelist-streamline"
version = "0.6.0"
description = "A free and open-source platform for collecting, visualizing, and analyzing engineering metrics, allowing teams to track performance, improve processes, and make data-driven decisions."
authors = [{ name = "Fran", email = "rebelist.software@icloud.com" }]
requires-python = ">=3.13,<4.0"
readme = "README.md"
dependencies = [
    "jira",
    "dependency-injector>=4.47.1,<5",
    "python-dotenv>=1.1.0,<2",
    "workalendar>=17.0.0,<18",
    "python-dateutil>=2.9.0.post0,<3",
    "rich-click>=1.8.8,<2",
    "pymongo>=4.12.1,<5",
    "fastapi>=0.115.14,<0.116",
    "fastapi-cli>=0.0.7,<0.0.8",
    "loguru>=0.7.3,<0.8",
    "pydantic-settings>=2.9.1,<3",
    "pydantic>=2.11.4,<3",
    "python-gitlab>=6.0.0,<7",
    "tenacity>=9.1.2",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5,<9",
    "pytest-mock>=3.14.0,<4",
    "pytest-cov>=6.2.1",
    "pyright>=1.1.399,<2",
    "codecov>=2.1.13",
    "ruff>=0.11.4,<0.12",
    "pre-commit>=4.2.0,<5",
    "httpx>=0.28.1",
    "hatchling>=1.27.0",
]

[tool.uv]
package = true

[tool.uv.sources]
jira = { url = "https://github.com/pycontribs/jira/releases/download/3.10.4/jira-3.10.4-py3-none-any.whl" }

[tool.hatch.build.targets.wheel]
packages = ["src/rebelist"]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
streamline = "rebelist.streamline.handlers.cli.console:console"

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["src", "tests"]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownLambdaType = false
exclude = [
    "**/__pycache__"
]

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A", # Aesthetic rules (e.g., blank lines, comment formatting)
    "E", # Errors (e.g., syntax errors, indentation issues)
    "W", # Warnings (e.g., line length, trailing whitespace)
    "F", # Pyflakes (e.g., unused imports, undefined variables)
    "I", # Import rules (e.g., import order, unused imports)
    "B", # Bugbear (e.g., potential bugs, mutable default arguments)
    "C4", # McCabe complexity (e.g., function complexity)
    "N", # Naming conventions (e.g., PEP8 naming standards)
    "D", # Docstrings (e.g., missing docstrings, formatting issues)
    "RUF100", # Mistakes (e.g., common mistakes or poor patterns)
]
ignore = [
    "ANN", # Disable all type annotation-related checks
    "PYI", # Disable checks for .pyi stub files
    "PLR", # Disable Pylint rules related to typing
    "D107", # Disable documentation on __init__ methods
    "D100", # Disable missing docstring in public module
    "D104", # Disable missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests"
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/site-packages/*",
    "*/dependency_injector/*",
    "**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "var/coverage"
